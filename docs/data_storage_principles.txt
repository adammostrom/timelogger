Principles

Never write directly into the main file → always write into a temporary file first.

Atomic replace → once the temp file is done, rename/move it to replace the original (renames are atomic on most OSes).

Backup strategy → before overwriting, keep a backup copy (.bak).

Append vs Rewrite → decide if you append new rows or rewrite the whole file. Append is safer for logs, rewrite is needed if you edit rows.

Error handling → check streams for failure (if (!out) { … }).



// First, copy original into backup
    {
        std::ifstream src(filename, std::ios::binary);
        std::ofstream dst(backupFile, std::ios::binary);
        if (src && dst) {
            dst << src.rdbuf();
        }
    }

    // Now open the original for appending
    std::ofstream out(filename, std::ios::app);
    if (!out) {
        std::cerr << "Error: could not open file for writing.\n";
        return false;
    }

    out << newRow << "\n";

    if (!out) {
        std::cerr << "Error: writing failed.\n";
        return false;
    }

    return true;


    Backup copy: hours.csv.bak always has your last good version.

Append only: new rows just get added at the end, very low risk.

If you must edit/rewrite the entire CSV, then: write into .tmp, close, check success, then std::rename(tmp, filename).


Suggestion:

Program structure

main.cpp → handles CLI menu or args

Logger class → appends to CSV safely

Report class (optional) → reads CSV and computes stats

File safety

If append-only: just backup once in a while + append rows.

If rewrite: always write .tmp + rename atomic replace.

Recovery strategy

If crash happens mid-write, you still have .bak.

On startup, if .tmp exists, warn the user and ask whether to recover from it.


### APPEND MODE (WHICH I USE):

Append mode (std::ios::app) → the OS guarantees the file pointer is at the end, so you won’t overwrite existing lines by accident.

What can still go wrong:

Disk full → write fails halfway through the row.

Crash/power loss → you might get a truncated line, but the rest of the file is fine.

Rare case: if you open without std::ios::app by mistake, you could overwrite the file.


Always open with std::ios::app:


Check success:
if (!out) {
    std::cerr << "Error opening file\n";
}


Flush immediately (so data isn’t stuck in a buffer):
out << newRow << "\n" << std::flush;