int end_calculator(){

    // Extract the break first:

    ifstream break_file(".break_total.txt");

    long break_total = 0;

    break_file >> break_total;

        // Step 2: clear the file (truncate to 0 length)
    {
        ofstream out(".break_total.txt", ios::trunc);
        // file is now empty
    }

    break_file.close();

    long break_total_hour = calculate_hour_from_seconds(break_total);
    long break_total_mins = calculate_mins_from_seconds(break_total);


    auto now = system_clock::now();
    time_t end_state = system_clock::to_time_t(now);


    ifstream start_file(".start_state.txt");

    long start_time = 0;
    long start_state = 0;
    // Fetch the time stored in the start_temp.txt
    start_file >> start_state;
    start_file >> start_time;

    // Work time (hours:mins)
    long elapsed = end_state - start_state;
    if(elapsed < 0){
        elapsed = 0;
    }
    
    // Total worked time (work time - break)
    long total_work_time = elapsed - break_total;

    long worked_hours = calculate_hour_from_seconds(elapsed);
    long worked_mins = calculate_mins_from_seconds(elapsed);

    long total_work_time_hours = calculate_hour_from_seconds(total_work_time);
    long total_work_time_mins = calculate_mins_from_seconds(total_work_time);


    ofstream log_file(DATA_FILE, ios::app); // append mode

    string logging_record = format_record(start_state, end_state, break_total_hour, break_total_mins, worked_hours, worked_mins, total_work_time_hours, total_work_time_mins);


    string message =  "NOTE: The following data will be written and stored: " + logging_record + "\n"
         + "Save this record?\n";

    if(confirm(message)) {
        cout << "Record stored. \n";
        log_file << logging_record;
    } else {
        cout << "Record not stored! \n";
    }

    
    clear_temp_files();

    log_file.close();

    return 0;